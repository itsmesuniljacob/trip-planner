// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Trip {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(255)
  organizerId String   @map("organizer_id")
  status      String   @default("created") @db.VarChar(50)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  participants     Participant[]
  surveyResponses  SurveyResponse[]
  recommendations  Recommendation[]
  votes           Vote[]
  votingResults   VotingResult[]

  @@map("trips")
}

model Participant {
  id                   String  @id @default(uuid())
  tripId               String  @map("trip_id")
  name                 String  @db.VarChar(255)
  phoneNumber          String  @map("phone_number") @db.VarChar(20)
  hasCompletedSurvey   Boolean @default(false) @map("has_completed_survey")
  hasVoted             Boolean @default(false) @map("has_voted")
  surveyToken          String? @unique @map("survey_token") @db.VarChar(255)
  voteToken            String? @unique @map("vote_token") @db.VarChar(255)
  createdAt            DateTime @default(now()) @map("created_at")

  // Relations
  trip            Trip             @relation(fields: [tripId], references: [id], onDelete: Cascade)
  surveyResponses SurveyResponse[]
  votes           Vote[]

  @@map("participants")
}

model SurveyResponse {
  id                     String   @id @default(uuid())
  participantId          String   @map("participant_id")
  tripId                 String   @map("trip_id")
  budgetMin              Int?     @map("budget_min")
  budgetMax              Int?     @map("budget_max")
  budgetCurrency         String   @default("USD") @map("budget_currency") @db.VarChar(3)
  availableStartDate     DateTime? @map("available_start_date") @db.Date
  availableEndDate       DateTime? @map("available_end_date") @db.Date
  dateFlexibility        String?  @map("date_flexibility") @db.VarChar(20)
  destinationPreferences Json?    @map("destination_preferences")
  travelVibe             String?  @map("travel_vibe") @db.VarChar(100)
  additionalNotes        String?  @map("additional_notes") @db.Text
  submittedAt            DateTime @default(now()) @map("submitted_at")

  // Relations
  participant Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  trip        Trip        @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("survey_responses")
}

model Recommendation {
  id                   String   @id @default(uuid())
  tripId               String   @map("trip_id")
  destinationName      String   @map("destination_name") @db.VarChar(255)
  destinationCountry   String?  @map("destination_country") @db.VarChar(100)
  destinationRegion    String?  @map("destination_region") @db.VarChar(100)
  description          String?  @db.Text
  imageUrl             String?  @map("image_url") @db.VarChar(500)
  rationale            String?  @db.Text
  matchScore           Decimal? @map("match_score") @db.Decimal(3, 2)
  estimatedCostMin     Int?     @map("estimated_cost_min")
  estimatedCostMax     Int?     @map("estimated_cost_max")
  costCurrency         String   @default("USD") @map("cost_currency") @db.VarChar(3)
  bestTimeToVisit      String?  @map("best_time_to_visit") @db.VarChar(100)
  keyActivities        Json?    @map("key_activities")
  generatedBy          String?  @map("generated_by") @db.VarChar(20)
  createdAt            DateTime @default(now()) @map("created_at")

  // Relations
  trip          Trip           @relation(fields: [tripId], references: [id], onDelete: Cascade)
  votingResults VotingResult[]

  @@map("recommendations")
}

model Vote {
  id            String   @id @default(uuid())
  participantId String   @map("participant_id")
  tripId        String   @map("trip_id")
  rankings      Json     @map("rankings")
  submittedAt   DateTime @default(now()) @map("submitted_at")

  // Relations
  participant Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  trip        Trip        @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("votes")
}

model VotingResult {
  id                        String   @id @default(uuid())
  tripId                    String   @map("trip_id")
  winningRecommendationId   String?  @map("winning_recommendation_id")
  roundsData                Json?    @map("rounds_data")
  finalTally                Json?    @map("final_tally")
  calculatedAt              DateTime @default(now()) @map("calculated_at")

  // Relations
  trip                Trip            @relation(fields: [tripId], references: [id], onDelete: Cascade)
  winningRecommendation Recommendation? @relation(fields: [winningRecommendationId], references: [id])

  @@map("voting_results")
}
